{"version":3,"sources":["index.js"],"names":["FreeBoiler","class","onClick","props","React","Component","OccupiyBoiler","handleChange","event","setState","value","target","state","time","queryState","type","this","onChange","StateChanger","match","State","Boiler","fetch","mode","then","response","json","data","boilerState","postStateChange","newState","url","concat","method","handleStateChangeResult","status","handleStateChange","alert","result","className","ReactDOM","render","document","getElementById"],"mappings":"8NAIMA,G,6KACM,IAAD,OACP,OACE,6BACE,uBAAGC,MAAM,YAAT,2BACA,4BAAQC,QAAS,kBAAM,EAAKC,MAAMD,QAAQ,UAA1C,gB,GALiBE,IAAMC,YAWzBC,E,kDACJ,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IAORI,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,MAAOF,EAAMG,OAAOD,SAPnC,EAAKE,MAAQ,CACXC,KAAM,GAER,EAAKC,aALY,E,qDAYT,IAAD,OACP,OACE,6BACE,uBAAIb,MAAM,QAAV,2BACA,sFACA,2BAAOc,KAAK,OAAOL,MAAOM,KAAKJ,MAAMC,KAAMI,SAAUD,KAAKT,eAC1D,4BAAQL,QAAS,kBAAM,EAAKC,MAAMD,QAAQ,WAAY,EAAKU,MAAMC,QAAjE,kB,GAnBoBT,IAAMC,WAyB5Ba,E,uKAEF,OAAIF,KAAKb,MAAMS,MAAMO,MAAM,QAEvB,kBAACb,EAAD,CAAeJ,QAASc,KAAKb,MAAMD,UAInC,kBAACF,EAAD,CAAYE,QAASc,KAAKb,MAAMD,c,GARbE,IAAMC,WAc3Be,E,uKAEF,OACA,wCAAcJ,KAAKb,MAAMS,W,GAHTR,IAAMC,WAQpBgB,E,kDACJ,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAQRW,WAAa,WAEXQ,MADU,SACC,CAACC,KAAM,SACfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKlB,SAAS,CAACG,MAAOe,EAAKA,KAAKC,kBAb/B,EAgBnBC,gBAAkB,SAACC,GACjB,IAAIC,EAAM,IAERA,EADED,EAASX,MAAM,QACXY,EAAIC,OAAO,cAEXD,EAAIC,OAAO,kBAEnBV,MAAMS,EAAK,CACTE,OAAQ,OACRV,KAAM,SAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKO,wBAAwBP,EAAKQ,YA5BjC,EAwCnBC,kBAAoB,SAACN,EAAUjB,GAC7BwB,MAAMxB,GACN,EAAKJ,SAAS,CAACqB,SAAUA,IACzB,EAAKD,gBAAgBC,IAzCrB,EAAKlB,MAAQ,CACXA,MAAO,OACPkB,SAAU,IAEZ,EAAKhB,aANY,E,oEA+BKwB,GACtB,GAAe,IAAXA,EAAc,CAChB,IAAIR,EAAWd,KAAKJ,MAAMkB,SAC1Bd,KAAKP,SAAS,CAACG,MAAOkB,SAEtBO,MAAM,4D,+BAWR,OACE,yBAAKE,UAAU,UACb,yBAAKA,UAAU,gBACb,kBAACnB,EAAD,CAAOR,MAAOI,KAAKJ,MAAMA,SAE3B,yBAAK2B,UAAU,iBACb,kBAACrB,EAAD,CAAchB,QAASc,KAAKoB,kBAAmBxB,MAAOI,KAAKJ,MAAMA,c,GAtDtDR,IAAMC,WA+D3BmC,IAASC,OACP,kBAACpB,EAAD,MACAqB,SAASC,eAAe,W","file":"static/js/main.aa6a9a6d.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass FreeBoiler extends React.Component {\n  render() {\n    return (\n      <div>\n        <p class=\"occupied\">Someone is using boiler</p>\n        <button onClick={() => this.props.onClick(\"Free\")}>Free it</button>\n      </div>\n    );\n  }\n}\n\nclass OccupiyBoiler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 5\n    };\n    this.queryState();\n  }\n\n  handleChange = (event) => {\n    this.setState({value: event.target.value});\n  }\n\n  render() {\n    return (\n      <div>\n        <p  class=\"free\">No one using boiler now</p>\n        <p>input the time you want to use the boiler(unit: minute)</p>\n        <input type=\"text\" value={this.state.time} onChange={this.handleChange} />\n        <button onClick={() => this.props.onClick(\"Occupied\", this.state.time)}>Occupy it</button>\n      </div>\n    );\n  }\n}\n\nclass StateChanger extends React.Component {\n  render() {\n    if (this.props.state.match(\"Free\")) {\n      return (\n        <OccupiyBoiler onClick={this.props.onClick}/>\n      );\n    } else {\n      return (\n        <FreeBoiler onClick={this.props.onClick}/>\n      );\n    }\n  }\n}\n\nclass State extends React.Component {\n  render() {\n    return (\n    <p>boiler is {this.props.state}</p>\n    );\n  }\n}\n\nclass Boiler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      state: \"Free\",\n      newState: \"\"\n    };\n    this.queryState();\n  }\n\n  queryState = () => {\n    let url = \"/state\";\n    fetch(url, {mode: 'cors'})\n      .then(response => response.json())\n      .then(data => this.setState({state: data.data.boilerState}));\n  }\n\n  postStateChange = (newState) => {\n    let url = \"/\";\n    if (newState.match(\"Free\")) {\n      url = url.concat(\"state/free\");\n    } else {\n      url = url.concat(\"state/occupied\");\n    }\n    fetch(url, {\n      method: 'POST',\n      mode: 'cors'\n    })\n      .then(response => response.json())\n      .then(data => this.handleStateChangeResult(data.status));\n  }\n\n  handleStateChangeResult(result) {\n    if (result === 1) {\n      let newState = this.state.newState;\n      this.setState({state: newState});\n    } else {\n      alert(\"change state failed, plase refresh and try again later\");\n    }\n  }\n\n  handleStateChange = (newState, time) => {\n    alert(time);\n    this.setState({newState: newState});\n    this.postStateChange(newState);\n  }\n\n  render() {\n    return (\n      <div className=\"boiler\">\n        <div className=\"boiler-state\">\n          <State state={this.state.state}/>\n        </div>\n        <div className=\"State-Changer\">\n          <StateChanger onClick={this.handleStateChange} state={this.state.state} />\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Boiler />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}